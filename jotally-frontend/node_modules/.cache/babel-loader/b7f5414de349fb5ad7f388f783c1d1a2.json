{"ast":null,"code":"var _jsxFileName = \"/Users/peterdpong/Projects/jotally/jotally-frontend/src/components/RegisterForm.js\";\nimport React, { useState } from 'react';\nimport registerService from '../services/register';\nimport { useHistory } from 'react-router-dom';\n\nconst RegisterForm = ({\n  setErrorMessage\n}) => {\n  const history = useHistory();\n  const [newUsername, setNewUsername] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n\n  const onCancel = event => {\n    event.preventDefault();\n    history.push('/');\n  };\n\n  const handleRegister = async event => {\n    event.preventDefault();\n\n    if (newUsername == '' || newPassword == '') {\n      setErrorMessage('Username or Password cannot be left empty.');\n      setTimeout(() => {\n        setErrorMessage('');\n      }, 2500);\n      return;\n    }\n\n    try {\n      const user = await registerService.register({\n        newUsername,\n        newPassword\n      });\n      setNewUsername('');\n      setNewPassword('');\n      history.push('/');\n    } catch (exception) {\n      console.log(exception);\n      setErrorMessage('Error: Could not register. Try again later.');\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 2500);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, \"Register\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleRegister,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"subtitle\",\n    for: \"username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, \"Username\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"formTextbox\",\n    id: \"username\",\n    value: newUsername,\n    onChange: ({\n      target\n    }) => setNewUsername(target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"subtitle\",\n    for: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"formTextbox\",\n    id: \"password\",\n    type: \"password\",\n    value: newPassword,\n    onChange: ({\n      target\n    }) => setNewPassword(target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    id: \"login-button\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, \"Register\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    id: \"cancel-button\",\n    onClick: onCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, \"Cancel\")));\n};\n\nexport default RegisterForm;","map":{"version":3,"sources":["/Users/peterdpong/Projects/jotally/jotally-frontend/src/components/RegisterForm.js"],"names":["React","useState","registerService","useHistory","RegisterForm","setErrorMessage","history","newUsername","setNewUsername","newPassword","setNewPassword","onCancel","event","preventDefault","push","handleRegister","setTimeout","user","register","exception","console","log","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport registerService from '../services/register'\nimport { useHistory } from 'react-router-dom'\n\n\nconst RegisterForm = ({\n  setErrorMessage\n}) => {\n  const history = useHistory()\n  const [newUsername, setNewUsername] = useState('')\n  const [newPassword, setNewPassword] = useState('') \n\n  const onCancel = (event) => {\n    event.preventDefault()\n    history.push('/')\n  }\n\n  const handleRegister = async (event) => {\n    event.preventDefault()\n\n    if(newUsername == '' || newPassword == ''){\n      setErrorMessage('Username or Password cannot be left empty.')\n      setTimeout(() => {\n        setErrorMessage('')\n      }, 2500)\n      return\n    }\n\n    try {\n      const user = await registerService.register({\n        newUsername, newPassword\n      })\n      setNewUsername('')\n      setNewPassword('')\n      history.push('/')\n    } catch (exception) {\n      console.log(exception)\n      setErrorMessage('Error: Could not register. Try again later.')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 2500)\n    }\n  }\n\n  return(\n    <div>\n      <h2 className=\"title\">Register</h2>\n\n      <form onSubmit={handleRegister}>\n        <div>\n          <label className=\"subtitle\" for=\"username\">Username</label>\n          <input\n            className=\"formTextbox\"\n            id=\"username\"\n            value={newUsername}\n            onChange={({ target }) => setNewUsername(target.value)}\n          />\n        </div>\n\n        <div>\n        <label className=\"subtitle\" for=\"password\">Password</label>\n          <input\n            className=\"formTextbox\"\n            id=\"password\"\n            type=\"password\"\n            value={newPassword}\n            onChange={({ target }) => setNewPassword(target.value)}\n          />\n        </div>\n        <button className=\"button\" id='login-button' type=\"submit\">Register</button>\n        <button className=\"button\" id='cancel-button' onClick={onCancel}>Cancel</button>\n      </form>\n\n      \n    </div>\n  )\n}\n\nexport default RegisterForm"]},"metadata":{},"sourceType":"module"}