{"ast":null,"code":"var _jsxFileName = \"/Users/peterdpong/Projects/note-web-app/note-app-frontend/src/components/Toggable.js\";\nimport React, { useState, useImperativeHandle } from 'react';\nimport PropTypes from 'prop-types';\nconst Togglable = React.forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false);\n  const hideWhenVisible = {\n    display: visible ? 'none' : ''\n  };\n  const showWhenVisible = {\n    display: visible ? '' : 'none'\n  };\n\n  const toggleVisibility = () => {\n    setVisible(!visible);\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    };\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: hideWhenVisible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    onClick: toggleVisibility,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, props.buttonLabel)), /*#__PURE__*/React.createElement(\"div\", {\n    style: showWhenVisible,\n    className: \"toggableContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, props.children, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    onClick: toggleVisibility,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, \"cancel\")));\n});\nTogglable.displayName = 'Togglable';\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n};\nexport default Togglable;","map":{"version":3,"sources":["/Users/peterdpong/Projects/note-web-app/note-app-frontend/src/components/Toggable.js"],"names":["React","useState","useImperativeHandle","PropTypes","Togglable","forwardRef","props","ref","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","buttonLabel","children","displayName","propTypes","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,mBAAzB,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,MAAMC,SAAS,GAAGJ,KAAK,CAACK,UAAN,CAAiB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACjD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAMS,eAAe,GAAG;AAAEC,IAAAA,OAAO,EAAEH,OAAO,GAAG,MAAH,GAAY;AAA9B,GAAxB;AACA,QAAMI,eAAe,GAAG;AAAED,IAAAA,OAAO,EAAEH,OAAO,GAAG,EAAH,GAAQ;AAA1B,GAAxB;;AAEA,QAAMK,gBAAgB,GAAG,MAAM;AAC7BJ,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAFD;;AAIAN,EAAAA,mBAAmB,CAACK,GAAD,EAAM,MAAM;AAC7B,WAAO;AACLM,MAAAA;AADK,KAAP;AAGD,GAJkB,CAAnB;AAMA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,KAAK,EAAEH,eAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAEG,gBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuDP,KAAK,CAACQ,WAA7D,CADF,CADF,eAIE;AAAK,IAAA,KAAK,EAAEF,eAAZ;AAA6B,IAAA,SAAS,EAAC,iBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,KAAK,CAACS,QADT,eAEE;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAEF,gBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CAJF,CADF;AAWD,CA3BiB,CAAlB;AA6BAT,SAAS,CAACY,WAAV,GAAwB,WAAxB;AACAZ,SAAS,CAACa,SAAV,GAAsB;AACpBH,EAAAA,WAAW,EAAEX,SAAS,CAACe,MAAV,CAAiBC;AADV,CAAtB;AAKA,eAAef,SAAf","sourcesContent":["import React, {useState, useImperativeHandle} from 'react'\nimport PropTypes from 'prop-types'\n\nconst Togglable = React.forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n\n  return(\n    <div>\n      <div style={hideWhenVisible}>\n        <button className=\"button\" onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible} className=\"toggableContent\">\n        {props.children}\n        <button className=\"button\" onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n}) \n\nTogglable.displayName = 'Togglable'\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n}\n  \n\nexport default Togglable"]},"metadata":{},"sourceType":"module"}