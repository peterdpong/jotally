{"version":3,"sources":["services/notes.js","components/Note.js","services/login.js","components/LoginForm.js","components/NoteForm.js","components/Toggable.js","App.js","index.js"],"names":["token","getAll","axios","get","then","response","data","createNote","newObject","a","config","headers","Authorization","post","updateNote","id","put","setToken","newToken","Note","note","toggleImportance","label","important","className","content","onClick","login","credentials","LoginForm","handleSubmit","handleUsernameChange","handlePasswordChange","username","password","onSubmit","value","onChange","type","NoteForm","useState","newNote","setNewNote","event","preventDefault","Math","random","target","Togglable","React","forwardRef","props","ref","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","buttonLabel","children","displayName","Notification","message","Footer","color","fontStyle","fontSize","App","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","setUsername","setPassword","user","setUser","noteFormRef","useRef","useEffect","loggedUserJSON","window","localStorage","getItem","JSON","parse","noteService","initialNotes","console","log","length","addNote","noteObject","current","returnedNote","concat","notesToShow","filter","handleLogin","loginService","setItem","stringify","setTimeout","Toggable","name","map","key","find","n","changedNote","catch","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c95a7d6f.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = \"/api/notes\"\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => {\n    return response.data\n  })\n}\n\nconst createNote = async newObject => {\n  const config = {\n    headers: { Authorization: token }\n  }\n  const response = await axios.post(baseUrl, newObject, config)\n  return response.data\n}\n\nconst updateNote = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, createNote, updateNote, setToken}\n","import React from 'react'\n\nconst Note = ({note, toggleImportance}) => {\n  const label = note.important ? \"Make not important\" : \"Make important\"\n\n  return (\n    <li className='note'>\n      {note.content}  \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/url/login'\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nexport default { login }","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst LoginForm = ({\n  handleSubmit,\n  handleUsernameChange,\n  handlePasswordChange,\n  username,\n  password\n}) => {\n  return (\n    <div>\n      <h2>Login</h2>\n\n      <form onSubmit={handleSubmit}>\n        <div>\n          Username\n          <input\n            value={username}\n            onChange={handleUsernameChange}\n          />\n        </div>\n\n        <div>\n          Password\n          <input\n            type=\"password\"\n            value={password}\n            onChange={handlePasswordChange}\n          />\n        </div>\n        <button type=\"submit\">Login</button>\n      </form>\n    </div>\n  )\n}\n\nLoginForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  handleUsernameChange: PropTypes.func.isRequired,\n  handlePasswordChange: PropTypes.func.isRequired,\n  username: PropTypes.string.isRequired,\n  password: PropTypes.string.isRequired\n}\n\nexport default LoginForm","import React, {userState, useState} from 'react'\n\nconst NoteForm = ({createNote}) => {\n  const [newNote, setNewNote] = useState('')\n\n  const handleChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    \n    createNote({\n      content: newNote,\n      important: Math.random() > 0.5\n    })\n\n    setNewNote('')\n  }\n  return (\n    <div className='formDiv'>\n      <h2>Create a new note</h2>\n\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleChange}\n        />\n        <button type=\"submit\">Save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default NoteForm","import React, {useState, useImperativeHandle} from 'react'\nimport PropTypes from 'prop-types'\n\nconst Togglable = React.forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n\n  return(\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible} className=\"toggableContent\">\n        {props.children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n}) \n\nTogglable.displayName = 'Togglable'\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n}\n  \n\nexport default Togglable","import React, { useState, useEffect, useRef } from 'react'\nimport noteService from './services/notes'\nimport Note from './components/Note'\nimport loginService from './services/login'\nimport LoginForm from './components/LoginForm'\nimport NoteForm from './components/NoteForm'\nimport Toggable from './components/Toggable'\n\n\nconst Notification = ( {message} ) => {\n  if(message == null){\n    return null\n  }\n\n  return(\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  \n  return (\n    <div style={footerStyle}>\n      <br/>\n      <em>Note App - Peter D'Pong</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('a new note')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n  const [loginVisible, setLoginVisible] = useState(false)\n  const noteFormRef = useRef()\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      noteService.setToken(user.token)\n    }\n  }, [])\n\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes)\n    })\n  }, [])\n  console.log(\"render\", notes.length, \"notes\")\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const addNote = (noteObject) => {\n    noteFormRef.current.toggleVisibility()\n    noteService.createNote(noteObject).then(returnedNote => {\n      setNotes(notes.concat(returnedNote))\n      setNewNote(\"\")})\n  }\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n  const toggleImportance = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    noteService.updateNote(id, changedNote).then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    })\n    .catch(error => {\n      setErrorMessage(\n        `Note '${note.content}' was already removed from the server`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n      setNotes(notes.filter(n => n.id !== id))\n    })\n  }\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const user = await loginService.login({\n        username, password\n      })\n\n      window.localStorage.setItem(\n        'loggedNoteappUser', JSON.stringify(user)\n      )\n\n      noteService.setToken(user.token)\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      setErrorMessage('Wrong Credentials')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n  }\n\n  const loginForm = () => (\n    <Toggable buttonLabel='Login'>\n      <LoginForm\n        username={username}\n        password={password}\n        handleUsernameChange={({ target }) => setUsername(target.value)}\n        handlePasswordChange={({ target }) => setPassword(target.value)}\n        handleSubmit={handleLogin}/>\n    </Toggable>\n  )\n\n  const noteForm = () => (\n    <Toggable buttonLabel='New Note' ref={noteFormRef}>\n      <NoteForm\n        createNote={addNote}/>\n    </Toggable>\n  )\n\n  return (\n    <div>\n      <Notification message={errorMessage}/>\n\n      {user === null ? loginForm() : \n        <div>\n          <p>{user.name} Logged-In</p>\n          {noteForm()}\n        </div>\n        \n      }\n\n      <h1>Notes</h1>\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          Show {showAll ? 'Important' : 'All'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => \n          <Note \n          key={note.id} \n          note={note}\n          toggleImportance={() => toggleImportance(note.id)}\n          />)}\n      </ul>\n      \n      <Footer/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport './index.css'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)"],"sourceRoot":""}