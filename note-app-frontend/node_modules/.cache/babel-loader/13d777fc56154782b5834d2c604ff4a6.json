{"ast":null,"code":"var _jsxFileName = \"/Users/peterdpong/Projects/note-web-app/note-app-frontend/src/App.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport noteService from './services/notes';\nimport Note from './components/Note';\nimport loginService from './services/login';\nimport LoginForm from './components/LoginForm';\nimport NoteForm from './components/NoteForm';\nimport Toggable from './components/Toggable';\n\nconst Notification = ({\n  message\n}) => {\n  if (message == null) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, message);\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('a new note');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [user, setUser] = useState(null);\n  const [loginVisible, setLoginVisible] = useState(false);\n  const noteFormRef = useRef();\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser');\n\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON);\n      setUser(user);\n      noteService.setToken(user.token);\n    }\n  }, []);\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes);\n    });\n  }, []);\n  console.log(\"render\", notes.length, \"notes\");\n\n  const handleNoteChange = event => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const addNote = noteObject => {\n    noteFormRef.current.toggleVisibility();\n    noteService.createNote(noteObject).then(returnedNote => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n\n  const toggleImportance = id => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note,\n      important: !note.important\n    };\n    noteService.updateNote(id, changedNote).then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n    }).catch(error => {\n      setErrorMessage(`Note '${note.content}' was already removed from the server`);\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 5000);\n      setNotes(notes.filter(n => n.id !== id));\n    });\n  };\n\n  const handleLogin = async event => {\n    event.preventDefault();\n\n    try {\n      const user = await loginService.login({\n        username,\n        password\n      });\n      window.localStorage.setItem('loggedNoteappUser', JSON.stringify(user));\n      noteService.setToken(user.token);\n      setUser(user);\n      setUsername('');\n      setPassword('');\n    } catch (exception) {\n      setErrorMessage('Wrong Credentials');\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 5000);\n    }\n  };\n\n  const loginForm = () => /*#__PURE__*/React.createElement(Toggable, {\n    buttonLabel: \"Login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LoginForm, {\n    username: username,\n    password: password,\n    handleUsernameChange: ({\n      target\n    }) => setUsername(target.value),\n    handlePasswordChange: ({\n      target\n    }) => setPassword(target.value),\n    handleSubmit: handleLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }));\n\n  const noteForm = () => /*#__PURE__*/React.createElement(Toggable, {\n    buttonLabel: \"New Note\",\n    ref: noteFormRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NoteForm, {\n    createNote: addNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }));\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Notification, {\n    message: errorMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, \"Notes\"), user === null ? loginForm() : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"login-note-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"subtitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, user.name, \" currently Logged In\"), noteForm())), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button\",\n    onClick: () => setShowAll(!showAll),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, \"Show \", showAll ? 'Important' : 'All')), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"noteList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, notesToShow.map(note => /*#__PURE__*/React.createElement(Note, {\n    key: note.id,\n    note: note,\n    toggleImportance: () => toggleImportance(note.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, \"Note Web App - \", /*#__PURE__*/React.createElement(\"a\", {\n    className: \"links\",\n    href: \"https://peterdpong.github.io/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 45\n    }\n  }, \"Peter D'Pong\"))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/peterdpong/Projects/note-web-app/note-app-frontend/src/App.js"],"names":["React","useState","useEffect","useRef","noteService","Note","loginService","LoginForm","NoteForm","Toggable","Notification","message","App","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","username","setUsername","password","setPassword","user","setUser","loginVisible","setLoginVisible","noteFormRef","loggedUserJSON","window","localStorage","getItem","JSON","parse","setToken","token","getAll","then","initialNotes","console","log","length","handleNoteChange","event","target","value","addNote","noteObject","current","toggleVisibility","createNote","returnedNote","concat","notesToShow","filter","note","important","toggleImportance","id","find","n","changedNote","updateNote","map","catch","error","content","setTimeout","handleLogin","preventDefault","login","setItem","stringify","exception","loginForm","noteForm","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport noteService from './services/notes'\nimport Note from './components/Note'\nimport loginService from './services/login'\nimport LoginForm from './components/LoginForm'\nimport NoteForm from './components/NoteForm'\nimport Toggable from './components/Toggable'\n\n\nconst Notification = ( {message} ) => {\n  if(message == null){\n    return null\n  }\n\n  return(\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('a new note')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n  const [loginVisible, setLoginVisible] = useState(false)\n  const noteFormRef = useRef()\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      noteService.setToken(user.token)\n    }\n  }, [])\n\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes)\n    })\n  }, [])\n  console.log(\"render\", notes.length, \"notes\")\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const addNote = (noteObject) => {\n    noteFormRef.current.toggleVisibility()\n    noteService.createNote(noteObject).then(returnedNote => {\n      setNotes(notes.concat(returnedNote))\n      setNewNote(\"\")})\n  }\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n  const toggleImportance = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    noteService.updateNote(id, changedNote).then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    })\n    .catch(error => {\n      setErrorMessage(\n        `Note '${note.content}' was already removed from the server`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n      setNotes(notes.filter(n => n.id !== id))\n    })\n  }\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const user = await loginService.login({\n        username, password\n      })\n\n      window.localStorage.setItem(\n        'loggedNoteappUser', JSON.stringify(user)\n      )\n\n      noteService.setToken(user.token)\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      setErrorMessage('Wrong Credentials')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n  }\n\n  const loginForm = () => (\n    <Toggable buttonLabel='Login'>\n      <LoginForm\n        username={username}\n        password={password}\n        handleUsernameChange={({ target }) => setUsername(target.value)}\n        handlePasswordChange={({ target }) => setPassword(target.value)}\n        handleSubmit={handleLogin}/>\n    </Toggable>\n  )\n\n  const noteForm = () => (\n    <Toggable buttonLabel='New Note' ref={noteFormRef}>\n      <NoteForm\n        createNote={addNote}/>\n    </Toggable>\n  )\n\n  return (\n    <div className=\"app\">\n      <Notification message={errorMessage}/>\n\n      <div className=\"inline\">\n        <h1 className=\"title\">Notes</h1>\n        {user === null ? loginForm() : \n          <div className=\"login-note-form\">\n            <p className=\"subtitle\">{user.name} currently Logged In</p>\n            {noteForm()}\n          </div>\n        }\n      </div>\n\n      <div>\n        <button className=\"button\" onClick={() => setShowAll(!showAll)}>\n          Show {showAll ? 'Important' : 'All'}\n        </button>\n      </div>\n      <ul className=\"noteList\">\n        {notesToShow.map(note => \n          <Note \n          key={note.id} \n          note={note}\n          toggleImportance={() => toggleImportance(note.id)}\n          />)}\n      </ul>\n      \n      <div>\n        <p className=\"title\">Note Web App - <a className=\"links\" href=\"https://peterdpong.github.io/\">Peter D'Pong</a></p>\n      </div>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}